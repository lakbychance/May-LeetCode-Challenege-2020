class Solution {
public:
    int kadane(vector<int>& input)
    {
        int currentBest = input[0];
        int bestMax = input[0];
        for(int i = 1;i<input.size();i++)
        {
                currentBest = max(input[i],currentBest+input[i]);
                bestMax = max(bestMax,currentBest);
        }
        return bestMax;
    }
    int maxSubarraySumCircular(vector<int>& A) {
        int bestMax = kadane(A);
        int leftMax[A.size()];
        memset(leftMax,0,sizeof leftMax);
        int currentSum = A[0];
        leftMax[0] = currentSum;
        for(int i = 1;i<A.size();i++)
        {
            currentSum+=A[i];
            leftMax[i] = max(leftMax[i-1],currentSum);
        }
        currentSum = A[A.size()-1];
        for(int i = A.size()-2;i>0;i--)
        {
            bestMax = max(bestMax,currentSum+leftMax[i-1]);
            currentSum+=A[i];
        }
        
        return bestMax;
    }
};
